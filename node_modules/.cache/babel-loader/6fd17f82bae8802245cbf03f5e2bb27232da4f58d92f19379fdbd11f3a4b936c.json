{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MOHAMED ASHIK\\\\Desktop\\\\note-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Note from './Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // Load notes from local storage when the component mounts\n  useEffect(() => {\n    const savedNotes = localStorage.getItem('notes');\n    if (savedNotes) {\n      setNotes(JSON.parse(savedNotes));\n    }\n  }, []);\n\n  // Save notes to local storage whenever notes state changes\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }, [notes]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleAddNote = () => {\n    if (inputValue.trim() !== '') {\n      setNotes([...notes, inputValue]);\n      setInputValue('');\n    }\n  };\n  const handleDeleteNote = index => {\n    const updatedNotes = notes.filter((_, i) => i !== index);\n    setNotes(updatedNotes);\n  };\n  const handleSaveNotes = () => {\n    // Save notes to local storage\n    localStorage.setItem('notes', JSON.stringify(notes));\n    alert('Notes saved successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"My Note App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Enter your note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon-button\",\n        onClick: handleAddNote,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes-container\",\n      children: notes.map((note, index) => /*#__PURE__*/_jsxDEV(Note, {\n        text: note,\n        onDelete: () => handleDeleteNote(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VTFsDyIyvNDPY13oPPLCxfn7klU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Note","jsxDEV","_jsxDEV","App","_s","notes","setNotes","inputValue","setInputValue","savedNotes","localStorage","getItem","JSON","parse","setItem","stringify","handleInputChange","event","target","value","handleAddNote","trim","handleDeleteNote","index","updatedNotes","filter","_","i","handleSaveNotes","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","map","note","text","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/MOHAMED ASHIK/Desktop/note-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Note from './Note';\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // Load notes from local storage when the component mounts\n  useEffect(() => {\n    const savedNotes = localStorage.getItem('notes');\n    if (savedNotes) {\n      setNotes(JSON.parse(savedNotes));\n    }\n  }, []);\n\n  // Save notes to local storage whenever notes state changes\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }, [notes]);\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleAddNote = () => {\n    if (inputValue.trim() !== '') {\n      setNotes([...notes, inputValue]);\n      setInputValue('');\n    }\n  };\n\n  const handleDeleteNote = (index) => {\n    const updatedNotes = notes.filter((_, i) => i !== index);\n    setNotes(updatedNotes);\n  };\n\n  const handleSaveNotes = () => {\n    // Save notes to local storage\n    localStorage.setItem('notes', JSON.stringify(notes));\n    alert('Notes saved successfully!');\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">My Note App</h1>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Enter your note\"\n        />\n        <button className=\"icon-button\" onClick={handleAddNote}>\n          +\n        </button>\n      </div>\n      <div className=\"notes-container\">\n        {notes.map((note, index) => (\n          <Note\n            key={index}\n            text={note}\n            onDelete={() => handleDeleteNote(index)}\n          />\n        ))}\n      </div>\n      {/* <button >\n        Save Notes\n      </button> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}